package usecase

import (
	"context"

	"{{ .ModuleName }}/internal/domain/{{ .DomainLowerCase }}"
    "{{ .ModuleName }}/internal/domain/{{ .DomainLowerCase }}/repository/database"

)

type UseCase interface {
	Create(ctx context.Context, {{ .DomainLowerCase }} {{ .DomainLowerCase }}.Request) (*{{ .DomainLowerCase }}.{{ .Domain }}, error)
	List(ctx context.Context, f *{{ .DomainLowerCase }}.Filter) ([]*{{ .DomainLowerCase }}.{{ .Domain }}, error)
	Read(ctx context.Context, {{ .DomainLowerCase }}ID uint) (*{{ .DomainLowerCase }}.{{ .Domain }}, error)
	Update(ctx context.Context, {{ .DomainLowerCase }} *{{ .DomainLowerCase }}.{{ .Domain }}) (*{{ .DomainLowerCase }}.{{ .Domain }}, error)
	Delete(ctx context.Context, {{ .DomainLowerCase }}ID uint) error
}

type useCase struct {
	repo database.Repository
}

func New(repo database.Repository) *useCase {
	return &useCase {
		repo: repo,
	}
}

func (u *useCase) Create(ctx context.Context, r {{ .DomainLowerCase }}.Request) (*{{ .DomainLowerCase }}.{{ .Domain }}, error) {
	dto := {{ .DomainLowerCase }}.To{{ .Domain }}(&r)
	{{ .DomainLowerCase }}Found, err := u.repo.CreateRead(ctx, dto)
	if err != nil {
		return nil, err
	}

	return {{ .DomainLowerCase }}Found, nil
}

func (u *useCase) List(ctx context.Context, f *{{ .DomainLowerCase }}.Filter) ([]*{{ .DomainLowerCase }}.{{ .Domain }}, error) {
	return u.repo.List(ctx, f)
}

func (u *useCase) Read(ctx context.Context, {{ .DomainLowerCase }}ID uint) (*{{ .DomainLowerCase }}.{{ .Domain }}, error) {
	return u.repo.Read(ctx, {{ .DomainLowerCase }}ID)
}

func (u *useCase) Update(ctx context.Context, {{ .DomainLowerCase }} *{{ .DomainLowerCase }}.{{ .Domain }}) (*{{ .DomainLowerCase }}.{{ .Domain }}, error) {
	err := u.repo.Update(ctx, {{ .DomainLowerCase }})
	if err != nil {
		return nil, err
	}
	return u.repo.Read(ctx, {{ .DomainLowerCase }}.ID)
}

func (u *useCase) Delete(ctx context.Context, {{ .DomainLowerCase }}ID uint) error {
	return u.repo.Delete(ctx, {{ .DomainLowerCase }}ID)
}
