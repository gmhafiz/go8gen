package handler

import (
	"net/http"

	"github.com/go-chi/render"
	"github.com/go-playground/validator/v10"

	"{{ .ModuleName }}/internal/domain/{{ .DomainLowerCase }}"
	"{{ .ModuleName }}/internal/domain/{{ .DomainLowerCase }}/usecase"
	"{{ .ModuleName }}/internal/utility/respond"
    "{{ .ModuleName }}/internal/utility/validate"
)

type HTTP interface {
	Create(w http.ResponseWriter, r *http.Request)
	List(w http.ResponseWriter, r *http.Request)
	Read(w http.ResponseWriter, r *http.Request)
	Update(w http.ResponseWriter, r *http.Request)
	Delete(w http.ResponseWriter, r *http.Request)
}

type Handler struct {
	useCase  usecase.UseCase
	validate *validator.Validate
}

func NewHandler(validator *validator.Validate, useCase usecase.UseCase) *Handler {
	return &Handler{
		useCase:  useCase,
		validate: validator,
	}
}

func (h *Handler) Create(w http.ResponseWriter, r *http.Request) {
	var req {{ .DomainLowerCase }}.Request
	err := render.DecodeJSON(r.Body, req)
	if err != nil {
        respond.Error(w, http.StatusBadRequest, err)
        return
    }

    errs := validate.Validate(h.validate, req)
    if errs != nil {
        respond.Errors(w, http.StatusBadRequest, errs)
        return
    }

    create, err := h.useCase.Create(r.Context(), req)
    if err != nil {
        respond.Error(w, http.StatusInternalServerError, err)
        return
    }

    respond.Json(w, http.StatusCreated, create)
}

func (h *Handler) List(w http.ResponseWriter, r *http.Request) {
    filters := {{ .DomainLowerCase }}.Filters(r.URL.Query())

    res, err := h.useCase.List(r.Context(), filters)
	if err != nil {
        respond.Error(w, http.StatusInternalServerError, err)
        return
	}

	respond.Json(w, http.StatusOK, res)
}

func (h *Handler) Read(w http.ResponseWriter, r *http.Request) {
	panic("implement me")
}

func (h *Handler) Update(w http.ResponseWriter, r *http.Request) {
	panic("implement me")
}

func (h *Handler) Delete(w http.ResponseWriter, r *http.Request) {
	panic("implement me")
}
