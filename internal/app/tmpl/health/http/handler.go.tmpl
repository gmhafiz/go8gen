package http

import (
	"net/http"

	"github.com/go-playground/validator/v10"

	"{{ .ModuleName }}/internal/domain/health/usecase"
	"{{ .ModuleName }}/internal/utility/respond"
)

type Health interface {
	Liveness(w http.ResponseWriter, r *http.Request)
	Readiness(w http.ResponseWriter, r *http.Request)
}

type Handler struct {
	useCase usecase.UseCase
	validate *validator.Validate
}

func NewHandler(useCase usecase.UseCase, validate *validator.Validate) *Handler {
	return &Handler{
		useCase: useCase,
		validate: validate,
	}
}

// Alive API
// @Summary Checks if API is up
// @Description Hits this API to see if API is running in the server
// @Success 200
// @Failure 500
// @Router /api/health/liveness [get]
func (h *Handler) Liveness(w http.ResponseWriter, r *http.Request) {
	respond.Json(w, http.StatusOK, nil)
}

// Alive Database
// @Summary Checks if both API and Database are up
// @Description Hits this API to see if both API and Database are running in the server
// @Success 200
// @Failure 500
// @Router /api/health/readiness [get]
func (h *Handler) Readiness(w http.ResponseWriter, r *http.Request) {
	err := h.useCase.Readiness()
	if err != nil {
		respond.Error(w, http.StatusInternalServerError, err)
		return
	}
	respond.Json(w, http.StatusOK, nil)
}
